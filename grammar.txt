program        → declaration* EOF;

declaration    → varDecl
               | funDecl
               | classDecl
               | statement ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;
funDecl        → "proc" proc
classDecl      → "class" IDENTIFIER "{" proc* "}" ;

proc           → IDENTIFIER "(" funParams? ")" block ;
funParams      → IDENTIFIER ("," IDENTIFIER)* ;

statement      → exprStmt
               | printStmt
               | block
               | ifStmt
               | whileStmt
               | forStmt
               | returnStmt ;

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
block          → "{" declaration* "}" ;
ifStmt         → "if" "(" expression ")" statement
                 ( "else" statement )? ;
whileStmt      → "while" "(" expression ")" statement ;
forStmt        → "for" "("
                    ( varDecl | exprStmt | ";" )
                    expression? ";"
                    expression?
                 ")" statement
               ;
returnStmt     → "return" expression? ";" ;

expression     → lambdaExpr
               | compound ;

lambdaExpr     → "\" "(" funParams? ")" "->" block ;

compound       → assignment ( (",") assignment )* ;
assignment     → ( call "." )? IDENTIFIER "<-" assignment
               | logical_or ;

logical_or     → logical_and ( "||" logical_and )* ;
logical_and    → equality ( "&&" equality )* ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | call ;
call           → primary ( "(" funArgs? ")" | "." IDENTIFIER )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER ;

funArgs        → expression ("," expression)* ;
